{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "48f8cabd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import  numpy as np \n",
    "import networkx as nx \n",
    "import seaborn as sns\n",
    "from tqdm.notebook import tqdm\n",
    "import netwulf\n",
    "from networkx.readwrite import json_graph\n",
    "import json\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "575c0652",
   "metadata": {},
   "outputs": [],
   "source": [
    "reviews = pd.read_csv('rotten_tomatoes_critic_reviews.csv')\n",
    "movies = pd.read_csv('rotten_tomatoes_movies.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2ca579f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['rotten_tomatoes_link', 'movie_title', 'movie_info',\n",
       "       'critics_consensus', 'content_rating', 'genres', 'directors', 'authors',\n",
       "       'actors', 'original_release_date', 'streaming_release_date', 'runtime',\n",
       "       'production_company', 'tomatometer_status', 'tomatometer_rating',\n",
       "       'tomatometer_count', 'audience_status', 'audience_rating',\n",
       "       'audience_count', 'tomatometer_top_critics_count',\n",
       "       'tomatometer_fresh_critics_count', 'tomatometer_rotten_critics_count'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6547211c",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies['original_release_date'] = pd.to_datetime(movies['original_release_date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "91883832",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rotten_tomatoes_link</th>\n",
       "      <th>movie_title</th>\n",
       "      <th>movie_info</th>\n",
       "      <th>critics_consensus</th>\n",
       "      <th>content_rating</th>\n",
       "      <th>genres</th>\n",
       "      <th>directors</th>\n",
       "      <th>authors</th>\n",
       "      <th>actors</th>\n",
       "      <th>original_release_date</th>\n",
       "      <th>...</th>\n",
       "      <th>production_company</th>\n",
       "      <th>tomatometer_status</th>\n",
       "      <th>tomatometer_rating</th>\n",
       "      <th>tomatometer_count</th>\n",
       "      <th>audience_status</th>\n",
       "      <th>audience_rating</th>\n",
       "      <th>audience_count</th>\n",
       "      <th>tomatometer_top_critics_count</th>\n",
       "      <th>tomatometer_fresh_critics_count</th>\n",
       "      <th>tomatometer_rotten_critics_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17707</th>\n",
       "      <td>m/zoot_suit</td>\n",
       "      <td>Zoot Suit</td>\n",
       "      <td>Mexican-American gangster Henry Reyna (Daniel ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama, Musical &amp; Performing Arts</td>\n",
       "      <td>Luis Valdez</td>\n",
       "      <td>Luis Valdez</td>\n",
       "      <td>Daniel Valdez, Edward James Olmos, Charles Aid...</td>\n",
       "      <td>1981-10-02</td>\n",
       "      <td>...</td>\n",
       "      <td>MCA Universal Home Video</td>\n",
       "      <td>Rotten</td>\n",
       "      <td>56.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>74.0</td>\n",
       "      <td>1195.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17708</th>\n",
       "      <td>m/zootopia</td>\n",
       "      <td>Zootopia</td>\n",
       "      <td>From the largest elephant to the smallest shre...</td>\n",
       "      <td>The brilliantly well-rounded Zootopia offers a...</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action &amp; Adventure, Animation, Comedy</td>\n",
       "      <td>Byron Howard, Rich Moore, Jared Bush</td>\n",
       "      <td>Jared Bush, Phil Johnston</td>\n",
       "      <td>J.K. Simmons, Kristen Bell, Octavia Spencer, A...</td>\n",
       "      <td>2016-03-04</td>\n",
       "      <td>...</td>\n",
       "      <td>Walt Disney Animation Studios</td>\n",
       "      <td>Certified-Fresh</td>\n",
       "      <td>98.0</td>\n",
       "      <td>291.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>92.0</td>\n",
       "      <td>101511.0</td>\n",
       "      <td>50</td>\n",
       "      <td>285</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17709</th>\n",
       "      <td>m/zorba_the_greek</td>\n",
       "      <td>Zorba the Greek</td>\n",
       "      <td>Traveling to inspect an abandoned mine his fat...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NR</td>\n",
       "      <td>Action &amp; Adventure, Art House &amp; International,...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anthony Quinn, Alan Bates, Irene Papas, Lila K...</td>\n",
       "      <td>1964-12-17</td>\n",
       "      <td>...</td>\n",
       "      <td>Fox</td>\n",
       "      <td>Fresh</td>\n",
       "      <td>80.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>86.0</td>\n",
       "      <td>7146.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17710</th>\n",
       "      <td>m/zulu</td>\n",
       "      <td>Zulu</td>\n",
       "      <td>In 1879, the Zulu nation hands colonial Britis...</td>\n",
       "      <td>Zulu patiently establishes a cast of colorful ...</td>\n",
       "      <td>PG</td>\n",
       "      <td>Classics, Drama</td>\n",
       "      <td>Cy Endfield, Cyril Endfield</td>\n",
       "      <td>Cy Endfield, John Prebble</td>\n",
       "      <td>Stanley Baker, Jack Hawkins, Ulla Jacobsson, J...</td>\n",
       "      <td>1964-06-17</td>\n",
       "      <td>...</td>\n",
       "      <td>Paramount Pictures</td>\n",
       "      <td>Fresh</td>\n",
       "      <td>96.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>91.0</td>\n",
       "      <td>30193.0</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17711</th>\n",
       "      <td>m/zulu_dawn</td>\n",
       "      <td>Zulu Dawn</td>\n",
       "      <td>Sir Henry Bartle Frere's (John Mills) vastly o...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action &amp; Adventure, Art House &amp; International,...</td>\n",
       "      <td>Douglas Hickox</td>\n",
       "      <td>Cy Endfield, Anthony Storey</td>\n",
       "      <td>Burt Lancaster, Peter O'Toole, Simon Ward, Joh...</td>\n",
       "      <td>1979-12-14</td>\n",
       "      <td>...</td>\n",
       "      <td>Tango Entertainment</td>\n",
       "      <td>Rotten</td>\n",
       "      <td>50.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>62.0</td>\n",
       "      <td>4469.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      rotten_tomatoes_link      movie_title  \\\n",
       "17707          m/zoot_suit        Zoot Suit   \n",
       "17708           m/zootopia         Zootopia   \n",
       "17709    m/zorba_the_greek  Zorba the Greek   \n",
       "17710               m/zulu             Zulu   \n",
       "17711          m/zulu_dawn        Zulu Dawn   \n",
       "\n",
       "                                              movie_info  \\\n",
       "17707  Mexican-American gangster Henry Reyna (Daniel ...   \n",
       "17708  From the largest elephant to the smallest shre...   \n",
       "17709  Traveling to inspect an abandoned mine his fat...   \n",
       "17710  In 1879, the Zulu nation hands colonial Britis...   \n",
       "17711  Sir Henry Bartle Frere's (John Mills) vastly o...   \n",
       "\n",
       "                                       critics_consensus content_rating  \\\n",
       "17707                                                NaN              R   \n",
       "17708  The brilliantly well-rounded Zootopia offers a...             PG   \n",
       "17709                                                NaN             NR   \n",
       "17710  Zulu patiently establishes a cast of colorful ...             PG   \n",
       "17711                                                NaN             PG   \n",
       "\n",
       "                                                  genres  \\\n",
       "17707                   Drama, Musical & Performing Arts   \n",
       "17708              Action & Adventure, Animation, Comedy   \n",
       "17709  Action & Adventure, Art House & International,...   \n",
       "17710                                    Classics, Drama   \n",
       "17711  Action & Adventure, Art House & International,...   \n",
       "\n",
       "                                  directors                      authors  \\\n",
       "17707                           Luis Valdez                  Luis Valdez   \n",
       "17708  Byron Howard, Rich Moore, Jared Bush    Jared Bush, Phil Johnston   \n",
       "17709                                   NaN                          NaN   \n",
       "17710           Cy Endfield, Cyril Endfield    Cy Endfield, John Prebble   \n",
       "17711                        Douglas Hickox  Cy Endfield, Anthony Storey   \n",
       "\n",
       "                                                  actors  \\\n",
       "17707  Daniel Valdez, Edward James Olmos, Charles Aid...   \n",
       "17708  J.K. Simmons, Kristen Bell, Octavia Spencer, A...   \n",
       "17709  Anthony Quinn, Alan Bates, Irene Papas, Lila K...   \n",
       "17710  Stanley Baker, Jack Hawkins, Ulla Jacobsson, J...   \n",
       "17711  Burt Lancaster, Peter O'Toole, Simon Ward, Joh...   \n",
       "\n",
       "      original_release_date  ...             production_company  \\\n",
       "17707            1981-10-02  ...       MCA Universal Home Video   \n",
       "17708            2016-03-04  ...  Walt Disney Animation Studios   \n",
       "17709            1964-12-17  ...                            Fox   \n",
       "17710            1964-06-17  ...             Paramount Pictures   \n",
       "17711            1979-12-14  ...            Tango Entertainment   \n",
       "\n",
       "       tomatometer_status tomatometer_rating tomatometer_count  \\\n",
       "17707              Rotten               56.0               9.0   \n",
       "17708     Certified-Fresh               98.0             291.0   \n",
       "17709               Fresh               80.0              10.0   \n",
       "17710               Fresh               96.0              23.0   \n",
       "17711              Rotten               50.0               8.0   \n",
       "\n",
       "       audience_status  audience_rating audience_count  \\\n",
       "17707          Upright             74.0         1195.0   \n",
       "17708          Upright             92.0       101511.0   \n",
       "17709          Upright             86.0         7146.0   \n",
       "17710          Upright             91.0        30193.0   \n",
       "17711          Upright             62.0         4469.0   \n",
       "\n",
       "       tomatometer_top_critics_count  tomatometer_fresh_critics_count  \\\n",
       "17707                              2                                5   \n",
       "17708                             50                              285   \n",
       "17709                              0                                8   \n",
       "17710                              6                               22   \n",
       "17711                              0                                4   \n",
       "\n",
       "       tomatometer_rotten_critics_count  \n",
       "17707                                 4  \n",
       "17708                                 7  \n",
       "17709                                 2  \n",
       "17710                                 1  \n",
       "17711                                 4  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.tail(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3f40b8b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of movies: 17712\n",
      "Total number of reviews: 1130017\n"
     ]
    }
   ],
   "source": [
    "ds = f'Total number of movies: {len(movies)}\\nTotal number of reviews: {len(reviews)}'\n",
    "print(ds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b397d45c",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies['actors'] = movies['actors'].apply(lambda x: str(x).split(','))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "829856b2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['rotten_tomatoes_link', 'movie_title', 'movie_info',\n",
       "       'critics_consensus', 'content_rating', 'genres', 'directors', 'authors',\n",
       "       'actors', 'original_release_date', 'streaming_release_date', 'runtime',\n",
       "       'production_company', 'tomatometer_status', 'tomatometer_rating',\n",
       "       'tomatometer_count', 'audience_status', 'audience_rating',\n",
       "       'audience_count', 'tomatometer_top_critics_count',\n",
       "       'tomatometer_fresh_critics_count', 'tomatometer_rotten_critics_count'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb975ff2",
   "metadata": {},
   "source": [
    "### Create a new variable called gender\n",
    "This will ad a list of the genders for the actors, the genders are in the same order as the actors. We will utilize the gender guesser api to do this.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3643427b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gender_guesser.detector as gender\n",
    "d = gender.Detector()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4d4b079c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'male'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d.get_gender('David')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d7fc3894",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rotten_tomatoes_link                                                        m/0814255\n",
       "movie_title                         Percy Jackson & the Olympians: The Lightning T...\n",
       "movie_info                          Always trouble-prone, the life of teenager Per...\n",
       "critics_consensus                   Though it may seem like just another Harry Pot...\n",
       "content_rating                                                                     PG\n",
       "genres                              Action & Adventure, Comedy, Drama, Science Fic...\n",
       "directors                                                              Chris Columbus\n",
       "authors                                    Craig Titley, Chris Columbus, Rick Riordan\n",
       "actors                              [Logan Lerman,  Brandon T. Jackson,  Alexandra...\n",
       "original_release_date                                             2010-02-12 00:00:00\n",
       "streaming_release_date                                                     2015-11-25\n",
       "runtime                                                                         119.0\n",
       "production_company                                                   20th Century Fox\n",
       "tomatometer_status                                                             Rotten\n",
       "tomatometer_rating                                                               49.0\n",
       "tomatometer_count                                                               149.0\n",
       "audience_status                                                               Spilled\n",
       "audience_rating                                                                  53.0\n",
       "audience_count                                                               254421.0\n",
       "tomatometer_top_critics_count                                                      43\n",
       "tomatometer_fresh_critics_count                                                    73\n",
       "tomatometer_rotten_critics_count                                                   76\n",
       "Name: 0, dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.loc[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bdd88c64",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.options.mode.chained_assignment = None\n",
    "movies['actor_genders'] = ' '\n",
    "for idx,row in movies.iterrows():\n",
    "    \n",
    "    genders = []\n",
    "    for actor in row['actors']:\n",
    "        if actor == '' or actor == ' ':\n",
    "            continue\n",
    "        actor = actor.split(' ')\n",
    "        if actor[0] == ' ' or actor[0] == '':\n",
    "            actor_first_name = actor[1] \n",
    "        else: \n",
    "            actor_first_name = actor[0]\n",
    "        gender = d.get_gender(actor_first_name)\n",
    "        genders.append(gender)\n",
    "    \n",
    "    movies.iloc[idx,-1] = ','.join(genders)\n",
    "movies['actor_genders'] = movies['actor_genders'].apply(lambda x: x.split(','))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "25d6876f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        [mostly_male, male, female, male, male, male, ...\n",
       "1        [female, female, male, female, female, female,...\n",
       "2        [male, male, female, male, mostly_female, most...\n",
       "3        [male, male, mostly_male, unknown, male, male,...\n",
       "4        [male, male, male, male, male, male, male, mal...\n",
       "                               ...                        \n",
       "17707    [male, male, male, unknown, male, male, male, ...\n",
       "17708    [unknown, female, female, male, female, male, ...\n",
       "17709    [male, male, female, female, male, female, unk...\n",
       "17710    [male, male, female, male, male, male, male, m...\n",
       "17711    [male, male, male, male, male, male, male, unk...\n",
       "Name: actor_genders, Length: 17712, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies['actor_genders'] "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0f1430e",
   "metadata": {},
   "source": [
    "### Crate variable called male and female count "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "298990fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies['male_count'] = movies['actor_genders'].apply(lambda x: sum([1 if g == 'male' or g == 'mostly_male' else 0 for g in x]))\n",
    "movies['female_count'] = movies['actor_genders'].apply(lambda x: sum([1 if g == 'female' or g == 'mostly_female' else 0 for g in x]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b53eb034",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='female_count', ylabel='tomatometer_rotten_critics_count'>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots(2,1)\n",
    "sns.scatterplot(data = movies,x='male_count',y = 'tomatometer_rotten_critics_count',ax = ax[0])\n",
    "sns.scatterplot(data = movies,x='female_count',y = 'tomatometer_rotten_critics_count',ax = ax[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54ab897f",
   "metadata": {},
   "source": [
    "### Constructing the graph\n",
    "Here we will construct the graph, with each node being a movie connected by the actors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9318a634",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_weighted_edge_list(movies_df):\n",
    "    '''\n",
    "    movies: A pandas dataframe containing the movie data-set from rotten tomatoes\n",
    "    return: returns a weighted edgelist to which can be read by networkx, each edge is\n",
    "    represented as: (Movie1,Movie2,weight) where the weight indicates how many actors appear\n",
    "    in both movies. \n",
    "    '''\n",
    "    # convert the list of actors for each movie into a set\n",
    "    movies_df['actors_set'] = movies_df['actors'].apply(set)\n",
    "    \n",
    "    # create an empty DataFrame to store the edge list\n",
    "    edge_list = []#pd.DataFrame(columns=['movie1', 'movie2', 'weight'])\n",
    "    actors = {}\n",
    "    # compare each pair of movies in the DataFrame\n",
    "    for i in tqdm(range(len(movies_df))):\n",
    "        for j in range(i + 1, len(movies_df)):\n",
    "            # find the actors that are shared between the two movies\n",
    "            shared_actors = movies_df.loc[i, 'actors_set'].intersection(movies_df.loc[j, 'actors_set'])\n",
    "            if shared_actors:\n",
    "                # create an edge between the two movies and set the weight to the number of shared actors\n",
    "                #edge_list.append()\n",
    "                edge_list.append((\n",
    "                    movies_df.loc[i, 'movie_title'],\n",
    "                    movies_df.loc[j, 'movie_title'],\n",
    "                    len(shared_actors)\n",
    "                ))\n",
    "                actors[(movies_df.loc[i, 'movie_title'],movies_df.loc[j, 'movie_title'])] = shared_actors\n",
    "    return edge_list,actors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e3159510",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8d243df8e7bc4ea2b307dcb27a7d7a4e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/10539 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[20], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m weighted_edge_list,actors \u001b[38;5;241m=\u001b[39m \u001b[43mget_weighted_edge_list\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmovies\u001b[49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[0;32mIn[19], line 18\u001b[0m, in \u001b[0;36mget_weighted_edge_list\u001b[0;34m(movies_df)\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m tqdm(\u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mlen\u001b[39m(movies_df))):\n\u001b[1;32m     16\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m j \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(i \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m, \u001b[38;5;28mlen\u001b[39m(movies_df)):\n\u001b[1;32m     17\u001b[0m         \u001b[38;5;66;03m# find the actors that are shared between the two movies\u001b[39;00m\n\u001b[0;32m---> 18\u001b[0m         shared_actors \u001b[38;5;241m=\u001b[39m movies_df\u001b[38;5;241m.\u001b[39mloc[i, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mactors_set\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mintersection(\u001b[43mmovies_df\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43mj\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mactors_set\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m)\n\u001b[1;32m     19\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m shared_actors:\n\u001b[1;32m     20\u001b[0m             \u001b[38;5;66;03m# create an edge between the two movies and set the weight to the number of shared actors\u001b[39;00m\n\u001b[1;32m     21\u001b[0m             \u001b[38;5;66;03m#edge_list.append()\u001b[39;00m\n\u001b[1;32m     22\u001b[0m             edge_list\u001b[38;5;241m.\u001b[39mappend((\n\u001b[1;32m     23\u001b[0m                 movies_df\u001b[38;5;241m.\u001b[39mloc[i, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmovie_title\u001b[39m\u001b[38;5;124m'\u001b[39m],\n\u001b[1;32m     24\u001b[0m                 movies_df\u001b[38;5;241m.\u001b[39mloc[j, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmovie_title\u001b[39m\u001b[38;5;124m'\u001b[39m],\n\u001b[1;32m     25\u001b[0m                 \u001b[38;5;28mlen\u001b[39m(shared_actors)\n\u001b[1;32m     26\u001b[0m             ))\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/indexing.py:1063\u001b[0m, in \u001b[0;36m_LocationIndexer.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1061\u001b[0m check_deprecated_indexers(key)\n\u001b[1;32m   1062\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mtype\u001b[39m(key) \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28mtuple\u001b[39m:\n\u001b[0;32m-> 1063\u001b[0m     key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtuple\u001b[39m(\u001b[38;5;28mlist\u001b[39m(x) \u001b[38;5;28;01mif\u001b[39;00m is_iterator(x) \u001b[38;5;28;01melse\u001b[39;00m x \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m key)\n\u001b[1;32m   1064\u001b[0m     key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtuple\u001b[39m(com\u001b[38;5;241m.\u001b[39mapply_if_callable(x, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m key)\n\u001b[1;32m   1065\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_is_scalar_access(key):\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "weighted_edge_list,actors = get_weighted_edge_list(movies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fa980f1f",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'weighted_edge_list' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[38], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m G \u001b[38;5;241m=\u001b[39m nx\u001b[38;5;241m.\u001b[39mGraph()\n\u001b[0;32m----> 2\u001b[0m G\u001b[38;5;241m.\u001b[39madd_weighted_edges_from(\u001b[43mweighted_edge_list\u001b[49m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'weighted_edge_list' is not defined"
     ]
    }
   ],
   "source": [
    "G = nx.Graph()\n",
    "G.add_weighted_edges_from(weighted_edge_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "6b5dd78f",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NodeView(('Percy Jackson & the Olympians: The Lightning Thief', 'Going the Distance', 'Married Life', 'Tron Legacy', 'The Hole', 'Lottery Ticket', 'The Ghost Writer', 'High School', 'Dangerous Liaisons', 'Risky Business', 'Running Scared', 'The Squeeze', 'Where the Heart Is', 'Switch', 'The Field', 'Deceived', 'Calendar Girl', 'The Fugitive', 'Please Give', 'Bandwagon', 'Delirious', 'The Ten', 'Black Widow', 'East of Eden', 'Fatal Attraction', 'Reckless', 'GoodFellas', 'Beethoven', 'The Three Musketeers', '10', '12 Angry Men (Twelve Angry Men)', 'Slipstream', 'The Visitor', 'The Box', 'Ripple Effect', 'Arthur', 'Big Business', 'Blind Date', 'Bus Stop', 'Crossroads', 'Dragnet', 'Footloose', 'Fun with Dick and Jane', 'Heat', 'The Hills Have Eyes', 'Lovesick', 'Meteor', 'The Music Man', 'Poltergeist', 'The Postman Always Rings Twice', 'Prophecy', \"Rock 'n' Roll High School\", 'Skin Deep', 'Sparkle', 'When a Stranger Calls', 'My Blue Heaven', 'Toy Soldiers', 'Gladiator', 'The Man Who Loved Women', 'When Do We Eat?', 'The Aviator', 'The Boston Strangler', \"Brian's Song\", 'The Champ', 'The Chase', 'Days of Wine and Roses', 'Exodus', 'From Here to Eternity', 'Heaven Can Wait', 'The Odd Couple', 'Power', 'A Raisin in the Sun', 'Robin Hood', 'A Streetcar Named Desire', 'Sweet Bird of Youth', 'Yours, Mine and Ours', 'Sorry, Wrong Number', 'Consenting Adults', '20,000 Leagues Under The Sea', 'The Narrow Margin', 'The Alamo', 'The Midnight Meat Train', 'Around the World in 80 Days', 'Casablanca', \"Charlotte's Web\", 'The Day the Earth Stood Still', 'Dodge City', 'The Enforcer', 'The Informer', 'King of Kings', 'The Lady Vanishes', 'Little Women', 'Lolita', 'The Lost Patrol', 'The Magnificent Seven', 'The Maltese Falcon', 'Metropolis', 'Odd Man Out', 'Pollyanna', 'Rear Window', 'Samson and Delilah', 'The Sea Hawk', 'Shall We Dance', 'Sinbad the Sailor', 'Spartacus', 'A Star Is Born', 'Tales of Terror', 'The Thing from Another World', 'Treasure Island', 'Where the Boys Are', 'White Christmas', 'Oscar', 'Kid Galahad', 'The Naked City', 'High Noon', 'Angels in the Outfield', '10,000 B.C.', 'Push', 'The Eagle Has Landed', 'Top Secret!', 'The 39 Steps', 'The Four Feathers', 'Goodbye, Mr. Chips', 'Hamlet', 'The Hound of the Baskervilles', 'The Human Factor', 'The Importance of Being Earnest', 'Jamaica Inn', 'Murder!', 'A Night to Remember', 'The Prisoner of Zenda', 'The Red Shoes', 'Scrooge', 'Stage Fright', 'The Sundowners', 'The Skin Game', '3:10 to Yuma', 'The Bad Seed', 'Battleground', 'The Big Heat', \"Brewster's Millions\", 'Butch Cassidy and the Sundance Kid', 'Grizzly', 'The Group', 'The Gunfighter', \"It's Alive\", 'Dick Tracy', 'Possessed', 'Abraham Lincoln', 'Anna Karenina', 'Bluebeard', 'Captain Blood', 'Cimarron', 'Cover Girl', 'Devil Doll', 'The Hunchback of Notre Dame', 'Intolerance', 'King Kong', 'Les Miserables', 'Morning Glory', 'The Parent Trap', 'The Picture of Dorian Gray', 'The Public Enemy', 'Stagecoach', 'Swing Time', 'A Tale of Two Cities', 'The Ten Commandments', \"A Woman's Face\", 'Conquest', 'State Fair', 'Bombshell (Blonde Bombshell)', 'Jane Eyre', 'Night Nurse', 'Fury', 'Born to Kill', 'Romeo and Juliet', 'Impact', 'Snow White and the Seven Dwarfs', 'The Accused', \"April Fool's Day\", 'The Best of Times', 'Betrayed', 'Cat People', 'Distant Thunder', 'Flashback', 'The Out-of-Towners', 'The Poseidon Adventure', 'Runaway', 'Stakeout', 'Tempest', \"We're No Angels\", 'Witness', 'Narrow Margin', 'The Hitman', 'The Babe', 'The Crush', 'Alive', 'Born Yesterday', 'The Lost City', 'Rise: Blood Hunter', 'Little Shop of Horrors', 'The Main Event', 'Red Dawn', 'Revenge', 'The Shooting', 'Thief', 'Three Amigos!', 'Uncommon Valor', 'Valley Girl', 'Blue Steel', 'The Rookie', 'The Doctor', 'JFK', 'Deep Cover', 'Live Wire', 'Forever Young', 'Scent of a Woman', 'The Breaking Point', 'All Quiet on the Western Front', \"All the King's Men\", 'Broken Arrow', 'Cleopatra', 'Dead Reckoning', 'Hud', 'Invasion of the Body Snatchers', 'Julius Caesar', 'The Letter', 'Night and Day', 'On the Beach', 'The Pink Panther', \"The Razor's Edge\", 'Shadow of a Doubt', 'Them!', \"Winchester '73\", \"Adam's Rib\", 'The Prowler (Cost of Living )', 'Camille', 'Cape Fear', 'Cutting Class', 'Easy Money', 'Father of the Bride', 'Freaky Friday', 'The Great Gatsby', 'The Great Race', 'Inherit the Wind', 'Lust for Life', 'The Nutty Professor', 'On the Town', 'Pride and Prejudice', 'The Prince and the Pauper', 'The Shaggy Dog', 'Show Boat', 'Suspicion', 'The Women', 'The Wrong Man', 'The Sea Wolf', 'The Bridge of San Luis Rey', 'Arthur and the Invisibles (Arthur and the Minimoys)', 'The Oxford Murders', 'Angel Heart', 'Bang The Drum Slowly', 'The Border', 'Doctor Zhivago', 'Frantic', 'The Mission', 'The Sunshine Boys', 'Edward II', 'Point of No Return (The Assassin)', 'The Secret Garden', 'The Apartment', 'Captains Courageous', 'Gun Crazy (Deadly Is the Female)', 'The Star', 'Criminal', 'The Eye', 'Rails & Ties', 'Man in the Chair', 'G-Force', 'Fade to Black', 'Red Heat', 'The Warriors', 'Cool Runnings', 'The Adventures of Mark Twain', 'Deep Blue', 'The Matador', 'Amazing Grace', 'The Adventures of Robin Hood', 'Man Hunt', 'A Christmas Carol', 'Christmas in Connecticut', 'Dr. Jekyll and Mr. Hyde', 'The Invisible Man', 'Johnny Belinda', 'Little Lord Fauntleroy', 'The Little Princess', \"A Midsummer Night's Dream\", 'The Mummy', 'Mutiny on the Bounty', 'My Man Godfrey', 'They Drive by Night', 'Houdini', 'Mata Hari', 'The Prize', 'Platinum Blonde', 'The Uninvited', 'All About Eve', 'The Black Hole', 'Blood and Sand', 'Bye Bye Birdie', 'Fright Night', 'Heidi', 'Ivanhoe', 'Planet of the Apes', 'Sahara', 'A Shot in the Dark', \"The St. Valentine's Day Massacre\", '101 Dalmatians', 'This Gun for Hire', 'Unfaithfully Yours', 'Wuthering Heights', 'The Jungle Book', \"Teacher's Pet\", 'Love on the Run', 'Dead End', \"Disney's A Christmas Carol\", 'Tristan & Isolde', 'Oliver Twist', \"The Tiger's Tail\", 'Run Fatboy Run', 'Good', 'Body of Lies', 'Endgame', 'The Bounty', 'The Elephant Man', 'Revolution', 'The Commitments', 'A Tale of Two Pizzas', 'Happy Tears', 'Ultraviolet', 'Neverwas', 'Quid Pro Quo', 'Public Enemies', 'Surrogates', 'Orphan', 'Stolen', 'Commando', 'Impulse', 'Nighthawks', 'No Mercy', 'Raw Deal', 'Nowhere to Run', 'The Freshman', 'Felon', 'Malcolm X', 'Bad Girls', 'What Happens in Vegas', 'Second Sight', 'Husbands and Wives', 'Dangerous Game', 'Eternal', 'Whiteout', 'A Farewell To Arms', 'Alexander the Great', 'Casino Royale', 'Farewell, My Lovely', 'Sabotage', 'Touch of Evil', 'Willard', 'Conquest of Space', 'The Last Man on Earth', 'The Birds', 'Cat on a Hot Tin Roof', 'Coma', 'Dangerous', 'The Desperate Hours', 'The Hindenburg', 'Imitation of Life', 'In Cold Blood', 'The Little Shop of Horrors', 'The Magnificent Ambersons', 'Monkey Business', 'Borderland', 'The Stone Angel', 'Wonderful World', 'The Last Song', 'The Long Walk Home', 'The Last of the Mohicans', 'Smile', 'Park', 'Alvin and the Chipmunks: The Squeakquel', 'Forever Strong', 'Children of the Corn', 'Memphis Belle', 'All I Want for Christmas', 'Indian Summer', 'Saint Ralph', 'Singles', 'Made in America', 'The Getaway', 'The Baxter', 'Meet Bill', 'The Guitar', 'The Fan', 'Funny Farm', 'Day of the Dead', 'The Duchess', 'A Man for All Seasons', 'Mr. & Mrs. Smith', 'Something to Sing About', 'Venom', 'The Italian Job', 'Much Ado About Nothing', 'Angel and the Badman', 'The Big Sleep', 'Brainstorm', 'Darling', 'Dillinger', 'Flying Tigers', 'The Green Berets', 'Hot Pursuit', 'Hustle', 'Jungle Book', 'The Longest Yard', 'The Manchurian Candidate', 'Mister Roberts', 'Point Blank', 'The Undefeated', 'Walking Tall', 'The Yearling', 'Kiss of Death', 'True Colors', 'G', 'The Happening', 'The Good Heart', 'Posse', 'Billy Budd', 'Flash Gordon', 'Flesh & Blood (Flesh+Blood) (The Rose and the Sword)', 'The Haunting', 'Islands in the Stream', 'Jason and the Argonauts', 'The Killer Elite', 'Look Back in Anger', 'Moby Dick', 'Moulin Rouge', 'Nicholas and Alexandra', 'Sorcerer', 'Swiss Family Robinson', 'The Taming of the Shrew', 'Alfie', 'The Boys from Brazil', 'Dracula', 'Dressed to Kill', 'The Hand', 'The Island', 'Moonraker', 'Water', 'The Entertainer', 'Alice in Wonderland', 'Alice', 'Aliens', 'Appaloosa', 'Repo Men', 'Legend', 'Near Dark', 'Next of Kin', 'Weird Science', 'Navy Seals', 'Rush', 'Stay Alive', 'The Informers', 'The Unborn', 'The Big Brawl (Battle Creek Brawl)', 'Checking Out', 'The Gambler', 'Shakedown', 'The Fly', 'A Hole in the Head', 'Mysterious Island', 'Sabrina', \"Twelve O'Clock High\", 'The Proposal', 'Burglar', 'The Mostly Unfabulous Social Life of Ethan Green', 'Fireflies in the Garden', 'Red', 'Black Rain', 'Glory', 'Of Mice and Men', 'Hero', 'Fearless', 'Dirty', 'Dreamland', 'Road House', 'The Thing', 'All of Me', 'Lost Horizon', \"House (Ding Dong, You're Dead)\", 'Made in Heaven', 'No Way Out', 'Pennies From Heaven', 'Popeye', 'The Sting', 'Awakenings', 'Leap of Faith', 'Equinox', 'Convoy', 'Escape from New York', 'The Flight of the Phoenix', 'Henry V', 'House of Wax', 'The Incubus', 'Street Fight', 'Outrage', 'The Lottery', 'Charade', 'Far From the Madding Crowd', 'The Island of Dr. Moreau', 'A Little Romance', 'Madame X', 'Wide Sargasso Sea', 'The Motel', 'Undoing', 'Harold', 'Once in a Lifetime: The Extraordinary Story of the New York Cosmos', 'Old Dogs', 'Kansas', 'Target', 'Victory', 'Leaves of Grass', 'Hairspray', 'The Other Man', 'Season of the Witch', 'The Bad News Bears', 'The Silence', 'Gone', 'The Situation', 'The Canyon', 'The Escapist', 'Mammoth (Mammut)', 'Four Sheets to the Wind', 'RoboCop', 'Flawless', 'Mannequin', 'Masquerade', 'The Miracle', 'Into the West', \"It's a Boy Girl Thing\", 'Frozen', 'The Dream Team', 'Mrs. Soffel', 'The Silent Partner', 'Twins', 'Igor', 'The Hangover', 'Gung Ho', 'Piranha', \"101 Dalmatians II: Patch's London Adventure\", 'Matinee', 'Interview', 'The Messenger', 'Mystery Train', 'American Anthem', 'Vice Versa', 'The Rocker', 'The Promotion', 'An American Affair', 'The Caller', 'Gigantic', 'Carrie', 'The King of Comedy', 'Straightheads (Closure)', 'The Hit', 'Beverly Hills Chihuahua', 'Spiral', 'The Cool School', 'Dune', \"Long Day's Journey Into Night\", 'The Trip', 'Boiling Point', 'Pathology', 'Untraceable', 'Hot Shots!', 'Shattered', 'Deep Water', 'Julia', 'Halloween', 'After Hours', 'My Girl', 'Class Act', 'Fatal Instinct', 'Fuel', '102 Dalmatians', 'Passengers', 'Scar', 'Bitch Slap', 'Darfur Now', 'The Objective', 'That Championship Season', \"My Best Friend's Girl\", 'Black Irish', 'Powder Blue', 'The Burrowers', 'Shuttle', 'Fame', 'The Lucky Ones', '21', 'Gettysburg', 'The Young Americans', 'Closing Escrow', 'Miss March', 'Randy and the Mob', 'Body Parts', 'Cool World', 'Dream Lover', 'Wild Child', 'Avalon', 'A Star is Born', 'Colors', 'The Long Goodbye', 'Laaga Chunari Mein Daag - Journey of a Woman', 'Saawariya', 'Aaja Nachle', 'Dostana', 'Canvas', 'Avenging Angel', 'The Firm', 'House', 'The Killing Jar', 'White Fang', 'Rab Ne Bana Di Jodi (A Couple Made by God) (A Match Made in Heaven)', 'Blood: The Last Vampire', 'Frankenstein', 'The Perfect Holiday', 'Land of the Lost', 'The Grand', 'Life as We Know It', 'Dead Heat', 'Manhunter', 'Tough Guys', 'Cliffhanger', 'The Road', 'I, the Jury', 'Scanners', 'Badland', 'Paradise', 'Thumbelina', 'The Auteur', 'The Stepfather', 'A Beautiful Life', 'Peter Pan', 'Faust', 'Das Haus der Schlafenden SchÃ¶nen (House of the Sleeping Beauties)', 'Armed and Dangerous', 'The Chosen', 'Death of a Salesman', 'The Goodbye Girl', 'The Men', 'The Odessa File', 'Suspect', 'A Midnight Clear', 'Unforgiven', 'Guta-yubalja-deul (A Bloody Aria)', 'Bakjwi (Thirst)', 'The Missing Person', 'Look', 'And God Created Woman', 'Ghost', 'Desperate Hours', 'Wind', 'Hard Times', 'Hardcore', 'The Hunter', 'Missing in Action', \"No Man's Land\", 'Out of the Dark', 'Predators', 'Manson, My Name Is Evil', 'The Hammer', 'Shutter', 'Priest', 'Eyewitness', 'Hidden Agenda', \"Trauma (Dario Argento's Trauma)\", 'The Broken', 'Un Conte de NoÃ«l (A Christmas Tale)', 'The Manhattan Project', 'The Red Baron (Der rote Baron)', 'Sugar', 'Eaten Alive', 'Galaxy of Terror (Mindwarp: An Infinity of Terror) (Planet of Horrors) (Quest)', 'Lock Up', \"Winter's Bone\", 'Breakout', 'Countdown', 'The Phantom of the Opera', 'Chloe', 'The Pirates of Penzance', 'The Rebound', 'The Kids Are All Right', 'Hawaii', 'Rich and Famous', 'Project X', 'Dogfight', 'Scared Stiff', 'Obsession', 'Year of the Dragon', 'Soul Men', 'Tommy', 'Airborne', 'Notorious', 'Chatham (The Golden Boys)', 'Fandango', '1,000 Times Good Night', 'Silver Streak', 'Rapid Fire', 'Shrink', 'Frankie & Johnny', 'Invaders From Mars', 'The Garden', 'The Fury', 'Splash', 'Gypsy', 'Dinner at Eight', 'A Night at the Opera', \"My Sister's Keeper\", 'The Good Soldier', 'Lucky', 'The Train', 'Skin', 'Damn Yankees', 'Bad Company', 'The Ape', 'How the Grinch Stole Christmas', 'The Long, Hot Summer', 'Mighty Joe Young', 'The Jazz Singer', 'Summer School', 'Last Ride', '100 Bloody Acres', 'The Vanishing', 'The Wild Hunt', 'Broken Hill', 'Suck', 'Assault on Precinct 13', 'Carny', 'Rocky', 'Black Sunday', \"The Belles of St. Trinian's\", 'Calamity Jane', 'The General', 'The King and I', 'Quo Vadis?', 'Scarface', 'Separate Tables', 'Three Blind Mice', 'Strictly Ballroom', 'Pulse', 'Scarecrow', 'La MISSION', 'The Producers', 'The Prowler', 'Sugar Hill', 'Fire and Ice', 'Attack of the 50 Foot Woman', 'M', 'Only When I Laugh', 'Silent Night, Deadly Night', 'The Awakening', 'Babes in Toyland', 'The Miracle Worker', 'The Protector', 'Shaft', 'Der Blaue Engel (The Blue Angel)', 'Brief Encounter', 'Broken Blossoms', 'Gone in 60 Seconds', 'The Omen', 'Marty', 'The Little Drummer Boy', 'The Brotherhood', 'The Love Bug', 'Tre Fratelli (Three Brothers)', 'Suddenly', 'Caught', 'The Harder They Fall', 'House On Haunted Hill', 'Laura', 'The Pit and the Pendulum', 'Savage Messiah', 'The Prisoner', 'Village of the Damned', 'Blackmail', 'Sleeping Beauty', 'The Time Machine', 'The Lodger: A Story of the London Fog', 'Black Christmas', 'A Christmas Story', 'The Unforgiven', 'Le ProcÃ¨s (The Trial)', 'The Black Pirate', 'The Mark of Zorro', 'Svengali', 'Red Dust', 'Return to Oz', 'Simon', 'The Cutting Edge', 'Boomerang', 'Go West', 'Bug', 'The Country Girl', 'Jack and the Beanstalk', 'Duel', 'Gallipoli', 'The Lion in Winter', 'Short Circuit', 'The Mechanic', 'Champion', 'Flipper', 'Gloria', 'The Party', 'Camelot', 'Thirst', 'The Toolbox Murders', 'Girls! Girls! Girls!', 'Our Town', 'Carnival of Souls', 'The Cat and the Canary', 'Indiscreet', \"King Solomon's Mines\", 'The Ladykillers', 'Phantom Of The Opera', 'Rudolph the Red-Nosed Reindeer', 'Shivers (They Came from Within) (The Parasite Murders)', 'Anastasia', 'Deadfall', 'Jack Frost', 'Invaders from Mars', 'College', 'Red Sonja', 'The Dark Mirror', 'Creature from the Black Lagoon', 'It', 'The Stranger', 'Fahrenheit 451', 'Night of the Living Dead', 'Death in Venice', 'Edipo re (Oedipus Rex)', 'Game of Death', 'Dolls', 'Kickboxer', 'Frosty the Snowman', 'Medicine Man', 'Gunmen', 'Spring Break', 'Blind Terror (See No Evil)', 'The Roman Spring of Mrs. Stone', 'A Home of Our Own', 'Ned Kelly (Ned Kelly, Outlaw)', 'Tarzan, the Ape Man', 'The Browning Version', 'The Man in the Moon', 'Promised Land', \"Gulliver's Travels\", 'Heaven & Earth', 'The Guardian', 'Pit and the Pendulum (The Pit and the Pendulum)', 'Homo Faber (Voyager)', 'Sniper', 'The Connection', 'The Black Scorpion', 'Lilies of the Field', 'Neighbors', 'I corpi presentano tracce di violenza carnale (Torso) (Bodies Bear Traces of Carnal Violence)', 'Prom Night', 'Boy Meets Girl (1984)', 'Diabolique (Les Diaboliques)', 'Poison'))"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G.nodes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "f16a40ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Wanda Sykes'}"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "actors[(mov1,mov2)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca489299",
   "metadata": {},
   "source": [
    "#### Add the actors set as attributes to each edge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "f5ab371a",
   "metadata": {},
   "outputs": [],
   "source": [
    "for mov1,mov2 in G.edges:\n",
    "    try:\n",
    "        G[mov1][mov2]['Actors'] = list(actors[(mov1,mov2)])\n",
    "    except:\n",
    "        G[mov1][mov2]['Actors'] = list(actors[(mov2,mov1)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "2a1efdbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = json_graph.node_link_data(G)\n",
    "# save the data to a JSON file\n",
    "with open('graph.json', 'w') as f:\n",
    "    json.dump(data, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "439db5d5",
   "metadata": {},
   "source": [
    "### Load the graph in from a json file "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "608ff680",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('graph.json', 'r') as f:\n",
    "    data = json.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3d5988c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "G = json_graph.node_link_graph(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f1dc3679",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16429"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(G)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d6bc36a",
   "metadata": {},
   "source": [
    "#### Find giant connected component and use that"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "4919c25e",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"None of ['movie_title'] are in the columns\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[39], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m movies\u001b[38;5;241m.\u001b[39mreset_index()\n\u001b[0;32m----> 2\u001b[0m movies \u001b[38;5;241m=\u001b[39m \u001b[43mmovies\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mset_index\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mmovie_title\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/util/_decorators.py:331\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    325\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[1;32m    326\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m    327\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39m_format_argument_list(allow_args)),\n\u001b[1;32m    328\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[1;32m    329\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mfind_stack_level(),\n\u001b[1;32m    330\u001b[0m     )\n\u001b[0;32m--> 331\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/frame.py:6012\u001b[0m, in \u001b[0;36mDataFrame.set_index\u001b[0;34m(self, keys, drop, append, inplace, verify_integrity)\u001b[0m\n\u001b[1;32m   6009\u001b[0m                 missing\u001b[38;5;241m.\u001b[39mappend(col)\n\u001b[1;32m   6011\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m missing:\n\u001b[0;32m-> 6012\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mmissing\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m are in the columns\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6014\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[1;32m   6015\u001b[0m     frame \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\n",
      "\u001b[0;31mKeyError\u001b[0m: \"None of ['movie_title'] are in the columns\""
     ]
    }
   ],
   "source": [
    "movies.reset_index()\n",
    "movies = movies.set_index('movie_title')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6d5c3a93",
   "metadata": {},
   "outputs": [],
   "source": [
    "# loop through each node in the graph\n",
    "remove = []\n",
    "for node in G.nodes():\n",
    "    # get the corresponding data from the dataframe\n",
    "    data = movies.loc[node, 'original_release_date']\n",
    "    if str(type(data)) == \"<class 'pandas.core.series.Series'>\": \n",
    "        data = data[0]\n",
    "    # check if the data is above the year 2005\n",
    "    if data.year > 2005:\n",
    "        # if it is, keep the node in the graph\n",
    "        \n",
    "        continue\n",
    "    else:\n",
    "        # if it is not, remove the node from the graph\n",
    "        remove.append(node)\n",
    "\n",
    "G.remove_nodes_from(remove)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "6a9c5ac4",
   "metadata": {},
   "outputs": [],
   "source": [
    "s = max(nx.connected_components(G), key=len)\n",
    "G = G.subgraph(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a6b9e3fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7696"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(G)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8eb6871f",
   "metadata": {},
   "source": [
    "## Add the gender of the actors to as node attributes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "1888f25b",
   "metadata": {},
   "outputs": [],
   "source": [
    "for idx,edge in enumerate(G.edges()):\n",
    "    \n",
    "    actors = G[edge[0]][edge[1]]['Actors']\n",
    "    genders = []\n",
    "    for actor in actors:\n",
    "        if actor == '' or actor == ' ':\n",
    "            continue\n",
    "        actor = actor.split(' ')\n",
    "        if actor[0] == ' ' or actor[0] == '':\n",
    "            actor_first_name = actor[1] \n",
    "        else: \n",
    "            actor_first_name = actor[0]\n",
    "        gender = d.get_gender(actor_first_name)\n",
    "        genders.append(gender)\n",
    "    \n",
    "    G[edge[0]][edge[1]]['actor_genders'] = genders"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b0cdcbc",
   "metadata": {},
   "source": [
    "### Check that the atributes has been set correctly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "34efc197",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "('Percy Jackson & the Olympians: The Lightning Thief', 'Married Life')\n",
      "{'weight': 1, 'Actors': [' Suzanne Ristic'], 'actor_genders': ['female']}\n",
      "1\n",
      "('Percy Jackson & the Olympians: The Lightning Thief', 'Tron Legacy')\n",
      "{'weight': 2, 'Actors': [' Serinda Swan', ' Conrad Coates'], 'actor_genders': ['unknown', 'male']}\n",
      "2\n",
      "('Percy Jackson & the Olympians: The Lightning Thief', 'The Hole')\n",
      "{'weight': 1, 'Actors': [' Merritt Patterson'], 'actor_genders': ['male']}\n",
      "3\n",
      "('Percy Jackson & the Olympians: The Lightning Thief', 'Lottery Ticket')\n",
      "{'weight': 1, 'Actors': [' Brandon T. Jackson'], 'actor_genders': ['male']}\n",
      "4\n",
      "('Percy Jackson & the Olympians: The Lightning Thief', 'The Ghost Writer')\n",
      "{'weight': 1, 'Actors': [' Pierce Brosnan'], 'actor_genders': ['male']}\n"
     ]
    }
   ],
   "source": [
    "for i,edge in enumerate(G.edges()):\n",
    "    print(i)\n",
    "    print(edge)\n",
    "    print(G[edge[0]][edge[1]])\n",
    "    if i > 3: \n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "952aea31",
   "metadata": {},
   "source": [
    "### Set a node atribute for director gender and most common actor gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "c487f192",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_pd_series(x):\n",
    "    if str(type(x)) == \"<class 'pandas.core.series.Series'>\":\n",
    "        return True\n",
    "    else:\n",
    "        return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "a0a73363",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "0",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/indexes/base.py:3802\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3801\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/_libs/index.pyx:138\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/_libs/index.pyx:165\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5745\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5753\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 0",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[64], line 47\u001b[0m\n\u001b[1;32m     44\u001b[0m     genres \u001b[38;5;241m=\u001b[39m movies\u001b[38;5;241m.\u001b[39mloc[node][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgenres\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39msplit(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m,\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     46\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_pd_series(movies\u001b[38;5;241m.\u001b[39mloc[node][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcontent_rating\u001b[39m\u001b[38;5;124m'\u001b[39m]):\n\u001b[0;32m---> 47\u001b[0m     content_rating \u001b[38;5;241m=\u001b[39m \u001b[43mmovies\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43mnode\u001b[49m\u001b[43m]\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcontent_rating\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m     48\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     49\u001b[0m     content_rating \u001b[38;5;241m=\u001b[39m movies\u001b[38;5;241m.\u001b[39mloc[node][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcontent_rating\u001b[39m\u001b[38;5;124m'\u001b[39m]\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/frame.py:3807\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3805\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   3806\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 3807\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3808\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   3809\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pandas/core/indexes/base.py:3804\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[1;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[0;32m-> 3804\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3805\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3806\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3807\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3808\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3809\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[0;31mKeyError\u001b[0m: 0"
     ]
    }
   ],
   "source": [
    "att = {}\n",
    "Nan_directors = []\n",
    "most_freq = lambda List: max(set(List), key = List.count)\n",
    "for node in G.nodes():\n",
    "    if is_pd_series(movies.loc[node]['directors']):\n",
    "        try:\n",
    "            directors = movies.loc[node]['directors'][0].split(',')\n",
    "        except:\n",
    "            Nan_directors.append(node)\n",
    "    else:\n",
    "        try:\n",
    "            directors = movies.loc[node]['directors'].split(',')\n",
    "        except:\n",
    "            Nan_directors.append(node)\n",
    "    \n",
    "    director_genders = [d.get_gender(director.split(' ')[0]) for director in directors]\n",
    "    most_freq_director_gender = most_freq(director_genders)\n",
    "    \n",
    "    #Convert the mostly labels to the correct one \n",
    "    if most_freq_director_gender == 'mostly_male':\n",
    "        most_freq_director_gender = 'male'\n",
    "    elif most_freq_director_gender == 'mostly_female':\n",
    "        most_freq_director_gender == 'female'\n",
    "    \n",
    "    \n",
    "    if is_pd_series(movies.loc[node]['actor_genders']):\n",
    "        actors_genders = movies.loc[node]['actor_genders'][0]\n",
    "    else:\n",
    "        actors_genders = movies.loc[node]['actor_genders']\n",
    "        \n",
    "    most_freq_actor_gender = most_freq(actors_genders)\n",
    "    \n",
    "    \n",
    "    #Convert the mostly labels to the correct one \n",
    "    if most_freq_actor_gender == 'mostly_male':\n",
    "        most_freq_actor_gender = 'male'\n",
    "    elif most_freq_actor_gender == 'mostly_female':\n",
    "        most_freq_actor_gender == 'female'\n",
    "        \n",
    "    # Get the rotten tomato attributes:\n",
    "    if is_pd_series(movies.loc[node]['genres']):\n",
    "        genres = movies.loc[node]['genres'][0].split(',')\n",
    "    else:\n",
    "        genres = movies.loc[node]['genres'].split(',')\n",
    "    \n",
    "    if is_pd_series(movies.loc[node]['content_rating']):\n",
    "        content_rating = movies.loc[node][0]['content_rating']\n",
    "    else:\n",
    "        content_rating = movies.loc[node]['content_rating']\n",
    "    \n",
    "    att[node] = {'most_freq_actor_gender': most_freq_actor_gender,\n",
    "                 'most_freq_director_gender': most_freq_director_gender,\n",
    "                'genre':genres,\n",
    "                'content_rating': content_rating}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "88969b21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rotten_tomatoes_link</th>\n",
       "      <th>movie_info</th>\n",
       "      <th>critics_consensus</th>\n",
       "      <th>content_rating</th>\n",
       "      <th>genres</th>\n",
       "      <th>directors</th>\n",
       "      <th>authors</th>\n",
       "      <th>actors</th>\n",
       "      <th>original_release_date</th>\n",
       "      <th>streaming_release_date</th>\n",
       "      <th>...</th>\n",
       "      <th>tomatometer_count</th>\n",
       "      <th>audience_status</th>\n",
       "      <th>audience_rating</th>\n",
       "      <th>audience_count</th>\n",
       "      <th>tomatometer_top_critics_count</th>\n",
       "      <th>tomatometer_fresh_critics_count</th>\n",
       "      <th>tomatometer_rotten_critics_count</th>\n",
       "      <th>actor_genders</th>\n",
       "      <th>male_count</th>\n",
       "      <th>female_count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Running Scared</th>\n",
       "      <td>m/10004288-running_scared</td>\n",
       "      <td>Mafia flunky Joey Gazelle (Paul Walker) is ord...</td>\n",
       "      <td>This film runs with frenetic energy punctuated...</td>\n",
       "      <td>R</td>\n",
       "      <td>Action &amp; Adventure, Drama, Mystery &amp; Suspense</td>\n",
       "      <td>Wayne Kramer</td>\n",
       "      <td>Wayne Kramer</td>\n",
       "      <td>[Paul Walker,  Cameron Bright,  Vera Farmiga, ...</td>\n",
       "      <td>2006-02-24</td>\n",
       "      <td>2008-10-01</td>\n",
       "      <td>...</td>\n",
       "      <td>131.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>79.0</td>\n",
       "      <td>135400.0</td>\n",
       "      <td>39</td>\n",
       "      <td>54</td>\n",
       "      <td>77</td>\n",
       "      <td>[male, mostly_male, female, male, male, female...</td>\n",
       "      <td>19</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Running Scared</th>\n",
       "      <td>m/1018009-running_scared</td>\n",
       "      <td>Ray and Danny (Gregory Hines, Billy Crystal) a...</td>\n",
       "      <td>Running Scared struggles to strike a consisten...</td>\n",
       "      <td>R</td>\n",
       "      <td>Action &amp; Adventure, Comedy</td>\n",
       "      <td>Peter Hyams</td>\n",
       "      <td>Jimmy Huston, Vicki Polon, Gary M. Devore</td>\n",
       "      <td>[Gregory Hines,  Billy Crystal,  Jimmy Smits, ...</td>\n",
       "      <td>1986-06-27</td>\n",
       "      <td>2016-11-30</td>\n",
       "      <td>...</td>\n",
       "      <td>21.0</td>\n",
       "      <td>Spilled</td>\n",
       "      <td>58.0</td>\n",
       "      <td>8377.0</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>[male, male, male, male, unknown, male, male, ...</td>\n",
       "      <td>22</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     rotten_tomatoes_link  \\\n",
       "movie_title                                 \n",
       "Running Scared  m/10004288-running_scared   \n",
       "Running Scared   m/1018009-running_scared   \n",
       "\n",
       "                                                       movie_info  \\\n",
       "movie_title                                                         \n",
       "Running Scared  Mafia flunky Joey Gazelle (Paul Walker) is ord...   \n",
       "Running Scared  Ray and Danny (Gregory Hines, Billy Crystal) a...   \n",
       "\n",
       "                                                critics_consensus  \\\n",
       "movie_title                                                         \n",
       "Running Scared  This film runs with frenetic energy punctuated...   \n",
       "Running Scared  Running Scared struggles to strike a consisten...   \n",
       "\n",
       "               content_rating                                         genres  \\\n",
       "movie_title                                                                    \n",
       "Running Scared              R  Action & Adventure, Drama, Mystery & Suspense   \n",
       "Running Scared              R                     Action & Adventure, Comedy   \n",
       "\n",
       "                   directors                                    authors  \\\n",
       "movie_title                                                               \n",
       "Running Scared  Wayne Kramer                               Wayne Kramer   \n",
       "Running Scared   Peter Hyams  Jimmy Huston, Vicki Polon, Gary M. Devore   \n",
       "\n",
       "                                                           actors  \\\n",
       "movie_title                                                         \n",
       "Running Scared  [Paul Walker,  Cameron Bright,  Vera Farmiga, ...   \n",
       "Running Scared  [Gregory Hines,  Billy Crystal,  Jimmy Smits, ...   \n",
       "\n",
       "               original_release_date streaming_release_date  ...  \\\n",
       "movie_title                                                  ...   \n",
       "Running Scared            2006-02-24             2008-10-01  ...   \n",
       "Running Scared            1986-06-27             2016-11-30  ...   \n",
       "\n",
       "                tomatometer_count audience_status audience_rating  \\\n",
       "movie_title                                                         \n",
       "Running Scared              131.0         Upright            79.0   \n",
       "Running Scared               21.0         Spilled            58.0   \n",
       "\n",
       "                audience_count  tomatometer_top_critics_count  \\\n",
       "movie_title                                                     \n",
       "Running Scared        135400.0                             39   \n",
       "Running Scared          8377.0                              6   \n",
       "\n",
       "               tomatometer_fresh_critics_count  \\\n",
       "movie_title                                      \n",
       "Running Scared                              54   \n",
       "Running Scared                              12   \n",
       "\n",
       "                tomatometer_rotten_critics_count  \\\n",
       "movie_title                                        \n",
       "Running Scared                                77   \n",
       "Running Scared                                 9   \n",
       "\n",
       "                                                    actor_genders  male_count  \\\n",
       "movie_title                                                                     \n",
       "Running Scared  [male, mostly_male, female, male, male, female...          19   \n",
       "Running Scared  [male, male, male, male, unknown, male, male, ...          22   \n",
       "\n",
       "                female_count  \n",
       "movie_title                   \n",
       "Running Scared             5  \n",
       "Running Scared             5  \n",
       "\n",
       "[2 rows x 24 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.loc[node]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "3939728e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rotten_tomatoes_link</th>\n",
       "      <th>movie_info</th>\n",
       "      <th>critics_consensus</th>\n",
       "      <th>content_rating</th>\n",
       "      <th>genres</th>\n",
       "      <th>directors</th>\n",
       "      <th>authors</th>\n",
       "      <th>actors</th>\n",
       "      <th>original_release_date</th>\n",
       "      <th>streaming_release_date</th>\n",
       "      <th>...</th>\n",
       "      <th>tomatometer_count</th>\n",
       "      <th>audience_status</th>\n",
       "      <th>audience_rating</th>\n",
       "      <th>audience_count</th>\n",
       "      <th>tomatometer_top_critics_count</th>\n",
       "      <th>tomatometer_fresh_critics_count</th>\n",
       "      <th>tomatometer_rotten_critics_count</th>\n",
       "      <th>actor_genders</th>\n",
       "      <th>male_count</th>\n",
       "      <th>female_count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>movie_title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Percy Jackson &amp; the Olympians: The Lightning Thief</th>\n",
       "      <td>m/0814255</td>\n",
       "      <td>Always trouble-prone, the life of teenager Per...</td>\n",
       "      <td>Though it may seem like just another Harry Pot...</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action &amp; Adventure, Comedy, Drama, Science Fic...</td>\n",
       "      <td>Chris Columbus</td>\n",
       "      <td>Craig Titley, Chris Columbus, Rick Riordan</td>\n",
       "      <td>[Logan Lerman,  Brandon T. Jackson,  Alexandra...</td>\n",
       "      <td>2010-02-12</td>\n",
       "      <td>2015-11-25</td>\n",
       "      <td>...</td>\n",
       "      <td>149.0</td>\n",
       "      <td>Spilled</td>\n",
       "      <td>53.0</td>\n",
       "      <td>254421.0</td>\n",
       "      <td>43</td>\n",
       "      <td>73</td>\n",
       "      <td>76</td>\n",
       "      <td>[mostly_male, male, female, male, male, male, ...</td>\n",
       "      <td>42</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Please Give</th>\n",
       "      <td>m/0878835</td>\n",
       "      <td>Kate (Catherine Keener) and her husband Alex (...</td>\n",
       "      <td>Nicole Holofcener's newest might seem slight i...</td>\n",
       "      <td>R</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>Nicole Holofcener</td>\n",
       "      <td>Nicole Holofcener</td>\n",
       "      <td>[Catherine Keener,  Amanda Peet,  Oliver Platt...</td>\n",
       "      <td>2010-04-30</td>\n",
       "      <td>2012-09-04</td>\n",
       "      <td>...</td>\n",
       "      <td>142.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>64.0</td>\n",
       "      <td>11574.0</td>\n",
       "      <td>44</td>\n",
       "      <td>123</td>\n",
       "      <td>19</td>\n",
       "      <td>[female, female, male, female, female, female,...</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>m/10</td>\n",
       "      <td>A successful, middle-aged Hollywood songwriter...</td>\n",
       "      <td>Blake Edwards' bawdy comedy may not score a pe...</td>\n",
       "      <td>R</td>\n",
       "      <td>Comedy, Romance</td>\n",
       "      <td>Blake Edwards</td>\n",
       "      <td>Blake Edwards</td>\n",
       "      <td>[Dudley Moore,  Bo Derek,  Julie Andrews,  Rob...</td>\n",
       "      <td>1979-10-05</td>\n",
       "      <td>2014-07-24</td>\n",
       "      <td>...</td>\n",
       "      <td>24.0</td>\n",
       "      <td>Spilled</td>\n",
       "      <td>53.0</td>\n",
       "      <td>14684.0</td>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>[male, male, female, male, mostly_female, most...</td>\n",
       "      <td>22</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12 Angry Men (Twelve Angry Men)</th>\n",
       "      <td>m/1000013-12_angry_men</td>\n",
       "      <td>Following the closing arguments in a murder tr...</td>\n",
       "      <td>Sidney Lumet's feature debut is a superbly wri...</td>\n",
       "      <td>NR</td>\n",
       "      <td>Classics, Drama</td>\n",
       "      <td>Sidney Lumet</td>\n",
       "      <td>Reginald Rose</td>\n",
       "      <td>[Martin Balsam,  John Fiedler,  Lee J. Cobb,  ...</td>\n",
       "      <td>1957-04-13</td>\n",
       "      <td>2017-01-13</td>\n",
       "      <td>...</td>\n",
       "      <td>54.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>97.0</td>\n",
       "      <td>105386.0</td>\n",
       "      <td>6</td>\n",
       "      <td>54</td>\n",
       "      <td>0</td>\n",
       "      <td>[male, male, mostly_male, unknown, male, male,...</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20,000 Leagues Under The Sea</th>\n",
       "      <td>m/1000079-20000_leagues_under_the_sea</td>\n",
       "      <td>In 1866, Professor Pierre M. Aronnax (Paul Luk...</td>\n",
       "      <td>One of Disney's finest live-action adventures,...</td>\n",
       "      <td>G</td>\n",
       "      <td>Action &amp; Adventure, Drama, Kids &amp; Family</td>\n",
       "      <td>Richard Fleischer</td>\n",
       "      <td>Earl Felton</td>\n",
       "      <td>[James Mason,  Kirk Douglas,  Paul Lukas,  Pet...</td>\n",
       "      <td>1954-01-01</td>\n",
       "      <td>2016-06-10</td>\n",
       "      <td>...</td>\n",
       "      <td>27.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>74.0</td>\n",
       "      <td>68918.0</td>\n",
       "      <td>5</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>[male, male, male, male, male, male, male, mal...</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zoot Suit</th>\n",
       "      <td>m/zoot_suit</td>\n",
       "      <td>Mexican-American gangster Henry Reyna (Daniel ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama, Musical &amp; Performing Arts</td>\n",
       "      <td>Luis Valdez</td>\n",
       "      <td>Luis Valdez</td>\n",
       "      <td>[Daniel Valdez,  Edward James Olmos,  Charles ...</td>\n",
       "      <td>1981-10-02</td>\n",
       "      <td>2016-04-19</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>74.0</td>\n",
       "      <td>1195.0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>[male, male, male, unknown, male, male, male, ...</td>\n",
       "      <td>27</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zootopia</th>\n",
       "      <td>m/zootopia</td>\n",
       "      <td>From the largest elephant to the smallest shre...</td>\n",
       "      <td>The brilliantly well-rounded Zootopia offers a...</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action &amp; Adventure, Animation, Comedy</td>\n",
       "      <td>Byron Howard, Rich Moore, Jared Bush</td>\n",
       "      <td>Jared Bush, Phil Johnston</td>\n",
       "      <td>[J.K. Simmons,  Kristen Bell,  Octavia Spencer...</td>\n",
       "      <td>2016-03-04</td>\n",
       "      <td>2016-06-07</td>\n",
       "      <td>...</td>\n",
       "      <td>291.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>92.0</td>\n",
       "      <td>101511.0</td>\n",
       "      <td>50</td>\n",
       "      <td>285</td>\n",
       "      <td>7</td>\n",
       "      <td>[unknown, female, female, male, female, male, ...</td>\n",
       "      <td>18</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zorba the Greek</th>\n",
       "      <td>m/zorba_the_greek</td>\n",
       "      <td>Traveling to inspect an abandoned mine his fat...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NR</td>\n",
       "      <td>Action &amp; Adventure, Art House &amp; International,...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[Anthony Quinn,  Alan Bates,  Irene Papas,  Li...</td>\n",
       "      <td>1964-12-17</td>\n",
       "      <td>2015-11-25</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>86.0</td>\n",
       "      <td>7146.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>[male, male, female, female, male, female, unk...</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zulu</th>\n",
       "      <td>m/zulu</td>\n",
       "      <td>In 1879, the Zulu nation hands colonial Britis...</td>\n",
       "      <td>Zulu patiently establishes a cast of colorful ...</td>\n",
       "      <td>PG</td>\n",
       "      <td>Classics, Drama</td>\n",
       "      <td>Cy Endfield, Cyril Endfield</td>\n",
       "      <td>Cy Endfield, John Prebble</td>\n",
       "      <td>[Stanley Baker,  Jack Hawkins,  Ulla Jacobsson...</td>\n",
       "      <td>1964-06-17</td>\n",
       "      <td>2017-01-08</td>\n",
       "      <td>...</td>\n",
       "      <td>23.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>91.0</td>\n",
       "      <td>30193.0</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>[male, male, female, male, male, male, male, m...</td>\n",
       "      <td>29</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zulu Dawn</th>\n",
       "      <td>m/zulu_dawn</td>\n",
       "      <td>Sir Henry Bartle Frere's (John Mills) vastly o...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action &amp; Adventure, Art House &amp; International,...</td>\n",
       "      <td>Douglas Hickox</td>\n",
       "      <td>Cy Endfield, Anthony Storey</td>\n",
       "      <td>[Burt Lancaster,  Peter O'Toole,  Simon Ward, ...</td>\n",
       "      <td>1979-12-14</td>\n",
       "      <td>2016-03-22</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>Upright</td>\n",
       "      <td>62.0</td>\n",
       "      <td>4469.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>[male, male, male, male, male, male, male, unk...</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>17712 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                     rotten_tomatoes_link  \\\n",
       "movie_title                                                                                 \n",
       "Percy Jackson & the Olympians: The Lightning Thief                              m/0814255   \n",
       "Please Give                                                                     m/0878835   \n",
       "10                                                                                   m/10   \n",
       "12 Angry Men (Twelve Angry Men)                                    m/1000013-12_angry_men   \n",
       "20,000 Leagues Under The Sea                        m/1000079-20000_leagues_under_the_sea   \n",
       "...                                                                                   ...   \n",
       "Zoot Suit                                                                     m/zoot_suit   \n",
       "Zootopia                                                                       m/zootopia   \n",
       "Zorba the Greek                                                         m/zorba_the_greek   \n",
       "Zulu                                                                               m/zulu   \n",
       "Zulu Dawn                                                                     m/zulu_dawn   \n",
       "\n",
       "                                                                                           movie_info  \\\n",
       "movie_title                                                                                             \n",
       "Percy Jackson & the Olympians: The Lightning Thief  Always trouble-prone, the life of teenager Per...   \n",
       "Please Give                                         Kate (Catherine Keener) and her husband Alex (...   \n",
       "10                                                  A successful, middle-aged Hollywood songwriter...   \n",
       "12 Angry Men (Twelve Angry Men)                     Following the closing arguments in a murder tr...   \n",
       "20,000 Leagues Under The Sea                        In 1866, Professor Pierre M. Aronnax (Paul Luk...   \n",
       "...                                                                                               ...   \n",
       "Zoot Suit                                           Mexican-American gangster Henry Reyna (Daniel ...   \n",
       "Zootopia                                            From the largest elephant to the smallest shre...   \n",
       "Zorba the Greek                                     Traveling to inspect an abandoned mine his fat...   \n",
       "Zulu                                                In 1879, the Zulu nation hands colonial Britis...   \n",
       "Zulu Dawn                                           Sir Henry Bartle Frere's (John Mills) vastly o...   \n",
       "\n",
       "                                                                                    critics_consensus  \\\n",
       "movie_title                                                                                             \n",
       "Percy Jackson & the Olympians: The Lightning Thief  Though it may seem like just another Harry Pot...   \n",
       "Please Give                                         Nicole Holofcener's newest might seem slight i...   \n",
       "10                                                  Blake Edwards' bawdy comedy may not score a pe...   \n",
       "12 Angry Men (Twelve Angry Men)                     Sidney Lumet's feature debut is a superbly wri...   \n",
       "20,000 Leagues Under The Sea                        One of Disney's finest live-action adventures,...   \n",
       "...                                                                                               ...   \n",
       "Zoot Suit                                                                                         NaN   \n",
       "Zootopia                                            The brilliantly well-rounded Zootopia offers a...   \n",
       "Zorba the Greek                                                                                   NaN   \n",
       "Zulu                                                Zulu patiently establishes a cast of colorful ...   \n",
       "Zulu Dawn                                                                                         NaN   \n",
       "\n",
       "                                                   content_rating  \\\n",
       "movie_title                                                         \n",
       "Percy Jackson & the Olympians: The Lightning Thief             PG   \n",
       "Please Give                                                     R   \n",
       "10                                                              R   \n",
       "12 Angry Men (Twelve Angry Men)                                NR   \n",
       "20,000 Leagues Under The Sea                                    G   \n",
       "...                                                           ...   \n",
       "Zoot Suit                                                       R   \n",
       "Zootopia                                                       PG   \n",
       "Zorba the Greek                                                NR   \n",
       "Zulu                                                           PG   \n",
       "Zulu Dawn                                                      PG   \n",
       "\n",
       "                                                                                               genres  \\\n",
       "movie_title                                                                                             \n",
       "Percy Jackson & the Olympians: The Lightning Thief  Action & Adventure, Comedy, Drama, Science Fic...   \n",
       "Please Give                                                                                    Comedy   \n",
       "10                                                                                    Comedy, Romance   \n",
       "12 Angry Men (Twelve Angry Men)                                                       Classics, Drama   \n",
       "20,000 Leagues Under The Sea                                 Action & Adventure, Drama, Kids & Family   \n",
       "...                                                                                               ...   \n",
       "Zoot Suit                                                            Drama, Musical & Performing Arts   \n",
       "Zootopia                                                        Action & Adventure, Animation, Comedy   \n",
       "Zorba the Greek                                     Action & Adventure, Art House & International,...   \n",
       "Zulu                                                                                  Classics, Drama   \n",
       "Zulu Dawn                                           Action & Adventure, Art House & International,...   \n",
       "\n",
       "                                                                               directors  \\\n",
       "movie_title                                                                                \n",
       "Percy Jackson & the Olympians: The Lightning Thief                        Chris Columbus   \n",
       "Please Give                                                            Nicole Holofcener   \n",
       "10                                                                         Blake Edwards   \n",
       "12 Angry Men (Twelve Angry Men)                                             Sidney Lumet   \n",
       "20,000 Leagues Under The Sea                                           Richard Fleischer   \n",
       "...                                                                                  ...   \n",
       "Zoot Suit                                                                    Luis Valdez   \n",
       "Zootopia                                            Byron Howard, Rich Moore, Jared Bush   \n",
       "Zorba the Greek                                                                      NaN   \n",
       "Zulu                                                         Cy Endfield, Cyril Endfield   \n",
       "Zulu Dawn                                                                 Douglas Hickox   \n",
       "\n",
       "                                                                                       authors  \\\n",
       "movie_title                                                                                      \n",
       "Percy Jackson & the Olympians: The Lightning Thief  Craig Titley, Chris Columbus, Rick Riordan   \n",
       "Please Give                                                                  Nicole Holofcener   \n",
       "10                                                                               Blake Edwards   \n",
       "12 Angry Men (Twelve Angry Men)                                                  Reginald Rose   \n",
       "20,000 Leagues Under The Sea                                                       Earl Felton   \n",
       "...                                                                                        ...   \n",
       "Zoot Suit                                                                          Luis Valdez   \n",
       "Zootopia                                                             Jared Bush, Phil Johnston   \n",
       "Zorba the Greek                                                                            NaN   \n",
       "Zulu                                                                 Cy Endfield, John Prebble   \n",
       "Zulu Dawn                                                          Cy Endfield, Anthony Storey   \n",
       "\n",
       "                                                                                               actors  \\\n",
       "movie_title                                                                                             \n",
       "Percy Jackson & the Olympians: The Lightning Thief  [Logan Lerman,  Brandon T. Jackson,  Alexandra...   \n",
       "Please Give                                         [Catherine Keener,  Amanda Peet,  Oliver Platt...   \n",
       "10                                                  [Dudley Moore,  Bo Derek,  Julie Andrews,  Rob...   \n",
       "12 Angry Men (Twelve Angry Men)                     [Martin Balsam,  John Fiedler,  Lee J. Cobb,  ...   \n",
       "20,000 Leagues Under The Sea                        [James Mason,  Kirk Douglas,  Paul Lukas,  Pet...   \n",
       "...                                                                                               ...   \n",
       "Zoot Suit                                           [Daniel Valdez,  Edward James Olmos,  Charles ...   \n",
       "Zootopia                                            [J.K. Simmons,  Kristen Bell,  Octavia Spencer...   \n",
       "Zorba the Greek                                     [Anthony Quinn,  Alan Bates,  Irene Papas,  Li...   \n",
       "Zulu                                                [Stanley Baker,  Jack Hawkins,  Ulla Jacobsson...   \n",
       "Zulu Dawn                                           [Burt Lancaster,  Peter O'Toole,  Simon Ward, ...   \n",
       "\n",
       "                                                   original_release_date  \\\n",
       "movie_title                                                                \n",
       "Percy Jackson & the Olympians: The Lightning Thief            2010-02-12   \n",
       "Please Give                                                   2010-04-30   \n",
       "10                                                            1979-10-05   \n",
       "12 Angry Men (Twelve Angry Men)                               1957-04-13   \n",
       "20,000 Leagues Under The Sea                                  1954-01-01   \n",
       "...                                                                  ...   \n",
       "Zoot Suit                                                     1981-10-02   \n",
       "Zootopia                                                      2016-03-04   \n",
       "Zorba the Greek                                               1964-12-17   \n",
       "Zulu                                                          1964-06-17   \n",
       "Zulu Dawn                                                     1979-12-14   \n",
       "\n",
       "                                                   streaming_release_date  \\\n",
       "movie_title                                                                 \n",
       "Percy Jackson & the Olympians: The Lightning Thief             2015-11-25   \n",
       "Please Give                                                    2012-09-04   \n",
       "10                                                             2014-07-24   \n",
       "12 Angry Men (Twelve Angry Men)                                2017-01-13   \n",
       "20,000 Leagues Under The Sea                                   2016-06-10   \n",
       "...                                                                   ...   \n",
       "Zoot Suit                                                      2016-04-19   \n",
       "Zootopia                                                       2016-06-07   \n",
       "Zorba the Greek                                                2015-11-25   \n",
       "Zulu                                                           2017-01-08   \n",
       "Zulu Dawn                                                      2016-03-22   \n",
       "\n",
       "                                                    ...  tomatometer_count  \\\n",
       "movie_title                                         ...                      \n",
       "Percy Jackson & the Olympians: The Lightning Thief  ...              149.0   \n",
       "Please Give                                         ...              142.0   \n",
       "10                                                  ...               24.0   \n",
       "12 Angry Men (Twelve Angry Men)                     ...               54.0   \n",
       "20,000 Leagues Under The Sea                        ...               27.0   \n",
       "...                                                 ...                ...   \n",
       "Zoot Suit                                           ...                9.0   \n",
       "Zootopia                                            ...              291.0   \n",
       "Zorba the Greek                                     ...               10.0   \n",
       "Zulu                                                ...               23.0   \n",
       "Zulu Dawn                                           ...                8.0   \n",
       "\n",
       "                                                   audience_status  \\\n",
       "movie_title                                                          \n",
       "Percy Jackson & the Olympians: The Lightning Thief         Spilled   \n",
       "Please Give                                                Upright   \n",
       "10                                                         Spilled   \n",
       "12 Angry Men (Twelve Angry Men)                            Upright   \n",
       "20,000 Leagues Under The Sea                               Upright   \n",
       "...                                                            ...   \n",
       "Zoot Suit                                                  Upright   \n",
       "Zootopia                                                   Upright   \n",
       "Zorba the Greek                                            Upright   \n",
       "Zulu                                                       Upright   \n",
       "Zulu Dawn                                                  Upright   \n",
       "\n",
       "                                                   audience_rating  \\\n",
       "movie_title                                                          \n",
       "Percy Jackson & the Olympians: The Lightning Thief            53.0   \n",
       "Please Give                                                   64.0   \n",
       "10                                                            53.0   \n",
       "12 Angry Men (Twelve Angry Men)                               97.0   \n",
       "20,000 Leagues Under The Sea                                  74.0   \n",
       "...                                                            ...   \n",
       "Zoot Suit                                                     74.0   \n",
       "Zootopia                                                      92.0   \n",
       "Zorba the Greek                                               86.0   \n",
       "Zulu                                                          91.0   \n",
       "Zulu Dawn                                                     62.0   \n",
       "\n",
       "                                                    audience_count  \\\n",
       "movie_title                                                          \n",
       "Percy Jackson & the Olympians: The Lightning Thief        254421.0   \n",
       "Please Give                                                11574.0   \n",
       "10                                                         14684.0   \n",
       "12 Angry Men (Twelve Angry Men)                           105386.0   \n",
       "20,000 Leagues Under The Sea                               68918.0   \n",
       "...                                                            ...   \n",
       "Zoot Suit                                                   1195.0   \n",
       "Zootopia                                                  101511.0   \n",
       "Zorba the Greek                                             7146.0   \n",
       "Zulu                                                       30193.0   \n",
       "Zulu Dawn                                                   4469.0   \n",
       "\n",
       "                                                    tomatometer_top_critics_count  \\\n",
       "movie_title                                                                         \n",
       "Percy Jackson & the Olympians: The Lightning Thief                             43   \n",
       "Please Give                                                                    44   \n",
       "10                                                                              2   \n",
       "12 Angry Men (Twelve Angry Men)                                                 6   \n",
       "20,000 Leagues Under The Sea                                                    5   \n",
       "...                                                                           ...   \n",
       "Zoot Suit                                                                       2   \n",
       "Zootopia                                                                       50   \n",
       "Zorba the Greek                                                                 0   \n",
       "Zulu                                                                            6   \n",
       "Zulu Dawn                                                                       0   \n",
       "\n",
       "                                                   tomatometer_fresh_critics_count  \\\n",
       "movie_title                                                                          \n",
       "Percy Jackson & the Olympians: The Lightning Thief                              73   \n",
       "Please Give                                                                    123   \n",
       "10                                                                              16   \n",
       "12 Angry Men (Twelve Angry Men)                                                 54   \n",
       "20,000 Leagues Under The Sea                                                    24   \n",
       "...                                                                            ...   \n",
       "Zoot Suit                                                                        5   \n",
       "Zootopia                                                                       285   \n",
       "Zorba the Greek                                                                  8   \n",
       "Zulu                                                                            22   \n",
       "Zulu Dawn                                                                        4   \n",
       "\n",
       "                                                    tomatometer_rotten_critics_count  \\\n",
       "movie_title                                                                            \n",
       "Percy Jackson & the Olympians: The Lightning Thief                                76   \n",
       "Please Give                                                                       19   \n",
       "10                                                                                 8   \n",
       "12 Angry Men (Twelve Angry Men)                                                    0   \n",
       "20,000 Leagues Under The Sea                                                       3   \n",
       "...                                                                              ...   \n",
       "Zoot Suit                                                                          4   \n",
       "Zootopia                                                                           7   \n",
       "Zorba the Greek                                                                    2   \n",
       "Zulu                                                                               1   \n",
       "Zulu Dawn                                                                          4   \n",
       "\n",
       "                                                                                        actor_genders  \\\n",
       "movie_title                                                                                             \n",
       "Percy Jackson & the Olympians: The Lightning Thief  [mostly_male, male, female, male, male, male, ...   \n",
       "Please Give                                         [female, female, male, female, female, female,...   \n",
       "10                                                  [male, male, female, male, mostly_female, most...   \n",
       "12 Angry Men (Twelve Angry Men)                     [male, male, mostly_male, unknown, male, male,...   \n",
       "20,000 Leagues Under The Sea                        [male, male, male, male, male, male, male, mal...   \n",
       "...                                                                                               ...   \n",
       "Zoot Suit                                           [male, male, male, unknown, male, male, male, ...   \n",
       "Zootopia                                            [unknown, female, female, male, female, male, ...   \n",
       "Zorba the Greek                                     [male, male, female, female, male, female, unk...   \n",
       "Zulu                                                [male, male, female, male, male, male, male, m...   \n",
       "Zulu Dawn                                           [male, male, male, male, male, male, male, unk...   \n",
       "\n",
       "                                                    male_count  female_count  \n",
       "movie_title                                                                   \n",
       "Percy Jackson & the Olympians: The Lightning Thief          42            37  \n",
       "Please Give                                                  2             6  \n",
       "10                                                          22            19  \n",
       "12 Angry Men (Twelve Angry Men)                             15             0  \n",
       "20,000 Leagues Under The Sea                                14             1  \n",
       "...                                                        ...           ...  \n",
       "Zoot Suit                                                   27            20  \n",
       "Zootopia                                                    18            12  \n",
       "Zorba the Greek                                              5             4  \n",
       "Zulu                                                        29             3  \n",
       "Zulu Dawn                                                   25             1  \n",
       "\n",
       "[17712 rows x 24 columns]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "872fb353",
   "metadata": {},
   "outputs": [],
   "source": [
    "nx.set_node_attributes(G,att)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "1bca788a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'most_freq_actor_gender': 'male', 'most_freq_director_gender': 'male'}"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G.nodes['The Rocker']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d018cb26",
   "metadata": {},
   "source": [
    "### Now we can answer the question: Does directors of the same gender tend to hire the same actors?\n",
    "In order to do so, the assortivity with respect to the gender of the director is found. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "87f01845",
   "metadata": {},
   "outputs": [],
   "source": [
    "from networkx.algorithms.assortativity import attribute_assortativity_coefficient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "cf3ba31b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Attribute assortativity: 0.029\n"
     ]
    }
   ],
   "source": [
    "# calculate the attribute assortativity\n",
    "assortativity = attribute_assortativity_coefficient(G, 'most_freq_director_gender')\n",
    "print(f\"Attribute assortativity: {assortativity:.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d82861b",
   "metadata": {},
   "source": [
    "### Now do the same for the gender of the actors\n",
    "The calculation of this coeficient will answer if a gender dominates a cast, are they then also often appearing in other gender dominated casts in other movies? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "12333724",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Attribute assortativity: 0.420\n"
     ]
    }
   ],
   "source": [
    "# calculate the attribute assortativity\n",
    "assortativity = attribute_assortativity_coefficient(G, 'most_freq_actor_gender')\n",
    "print(f\"Attribute assortativity: {assortativity:.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a461788b",
   "metadata": {},
   "source": [
    "This shows that actually there is a slight tendency of gender dominated cast movies, to connect and share actors with other gender dominated cast movies. Our hypothesis is that some actors tend to appear in the same genre of movies, which could have gender stereotypes attached to them. In order to investigate this further, a second dual graph is created. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f6a28ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create the dual graph\n",
    "G_dual = nx.line_graph(G)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3307e03",
   "metadata": {},
   "source": [
    "### Vizualise with netwulf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "8f87412d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# visualize the graph using netwulf\n",
    "netwulf.visualize(G)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "e221e8ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "282874"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G.number_of_edges()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7568c7c7",
   "metadata": {},
   "source": [
    "### Find and viz degree distribution of G"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "0bcce185",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# get the degree of each node\n",
    "degrees = [G.degree(node) for node in G.nodes()]\n",
    "sns.set_theme()\n",
    "# plot the degree distribution as a histogram\n",
    "sns.histplot(degrees, bins=range(max(degrees)+2))\n",
    "plt.xlabel('Degree')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Degree Distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2821b937",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
